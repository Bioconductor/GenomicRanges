%\VignetteIndexEntry{Overview of summarizeOverlaps}
%\VignetteDepends{}
%\VignetteKeywords{sequence, sequencing, alignments}
%\VignettePackage{GenomicRanges}
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioconductor}{\software{Bioconductor}}
\newcommand{\GenomicRanges}{\Rpackage{GenomicRanges}}

\SweaveOpts{keep.source=TRUE}

\title{Overview of \Rfunction{summarizeOverlaps}}
\author{Valerie Obenchain}
\date{Edited: 27 September 2011; Compiled: \today}

\begin{document}

\maketitle

\section{Introduction}
This vignette illustrates how reads mapped to a genome
can be counted with \Rfunction{summarizeOverlaps}. Different "modes" of
counting are provided to resolve reads that overlap multiple features.
The built-in count modes are patterned after the "Union", "IntersectionStrict",
and "IntersectionNotEmpty" methods found in the HTSeq package by Simon
Anders (see references). Alternatively, the user can provide their own count 
function and make use of the \Rfunction{summarizeOverlaps} infrastructure for 
reading multiple BAM files and parsing results into a 
\Robject{SummarizedExperiment} object.


\section{A First Example}

In this example reads are counted from a list of BAM files and returned in
a \Rcode{matrix} for use in further analysis such as those 
offered in \Rpackage{DESeq} and \Rpackage{edgeR}. 

<<firstExample, eval=TRUE, keep.source=TRUE>>=
library(Rsamtools)
library(DESeq)
library(edgeR)

fls = list.files(system.file("extdata",package="GenomicRanges"),
    recursive=TRUE, pattern="*bam$", full=TRUE)
bfl <- BamFileList(fls)

features <- GRanges(
    seqnames = Rle(c("chr2L", "chr2R", "chr2L", "chr2R", "chr2L", "chr2R",
        "chr2L", "chr2R", "chr2R", "chr3L", "chr3L")),
    strand = strand(rep("+", 11)),
    ranges = IRanges(start=c(1000, 2000, 3000, 3600, 7000, 7500, 4000, 4000, 
        3000, 5000, 5400), width=c(500, 900, 500, 300, 600, 300, 500, 900, 500, 
        500, 500))
)

solap <- summarizeOverlaps(features, bfl)

deseq <- newCountDataSet(countData=assays(solap)$counts,  
                           conditions=rownames(colData(solap)))

edger <- DGEList(counts=assays(solap)$counts, group=rownames(colData(solap)))
@

\section{Counting Modes}

The modes of "Union", "IntersectionStrict" and "IntersectionNotEmpty" 
provide different approaches to resolving reads that overlap multiple 
features. Figure~\ref{fig-summarizeOverlaps-modes} illustrates how both simple and 
gapped reads are handled by the modes. Note that a read is counted a
maximum of once; there is no double counting. These methods do not 
currently handle paired-end reads.

\begin{figure}[!h]
\begin{center}
\includegraphics{summarizeOverlaps-modes.pdf}
\caption{Counting Modes}
\label{fig-summarizeOverlaps-modes}
\end{center}
\end{figure}

\newpage

\section{Counting}

\Rfunction{summarizeOverlaps} counts reads mapped to features on a
genome where the features can be exons, transcripts, genes or 
any other region of interest. 

When a \Robject{GRanges} is supplied as the \Robject{features}
argument each row is considered a different feature. In contrast, when
a \Robject{GRangesList} is supplied the highest list-levels
are the different features and the elements of each list
are parts of the same feature. As an example, if \Rcode{features} is 
a \Robject{GRanges} of exons, counts will be returned for each exon. 
If instead \Rcode{features} is a \Robject{GRangesList} of exons within genes, 
the count result will be the length of the \Robject{GRangesList} object 
with counts for each gene.

As a simple demonstation of this concept we use a single read that overlaps
two features, gr1 and gr2.
<<simple>>=
library(GenomicRanges)
rd <- GappedAlignments("a", rname = Rle("chr1"), pos = as.integer(100),
    cigar = "300M", strand = strand("+"))

gr1 <- GRanges("chr1", IRanges(start=50, width=150), strand="+")
gr2 <- GRanges("chr1", IRanges(start=350, width=150), strand="+")
gr <- c(gr1, gr2)
grl <- GRangesList(c(gr1, gr2))
@

When the features are counted as a \Robject{GRanges} we see no overlap
for any of the modes. \Rcode{Union} does not count the read because 
it hit more than one feature, \Rcode{IntersectionStrict} requires that 
that read fall completely within a feature and \Robject{IntersetctionNotEmpty} 
does not count the read because a unique disjoint region is hit in more than 
one feature.
<<simpleGRanges>>=
data.frame(union = assays(summarizeOverlaps(gr, rd))$counts,
           intStrict = assays(summarizeOverlaps(gr, rd,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(gr, rd,
               mode="IntersectionNotEmpty"))$counts)
@

When the features are counted as a \Robject{GRangesList} we see that modes
\Rcode{Union} and \Rcode{IntersectionNotEmpty} both count the read as
a hit for the single feature that is the single \Robject{GRangesList}.
<<simpleGRangesList>>=
data.frame(union = assays(summarizeOverlaps(grl, rd))$counts,
           intStrict = assays(summarizeOverlaps(grl, rd,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(grl, rd,
               mode="IntersectionNotEmpty"))$counts)
@


In this more complicated example we have 7 reads, 5 are simple and 
2 have gaps in the CIGAR. There are 12 ranges that will serve as the
\Rcode{features}. 


<<data>>=
group_id <- c("A", "B", "C", "C", "D", "D", "E", "F", "G", "G", "H", "H")
features <- GRanges(
    seqnames = Rle(c("chr1", "chr2", "chr1", "chr1", "chr2", "chr2",
        "chr1", "chr1", "chr2", "chr2", "chr1", "chr1")),
    strand = strand(rep("+", length(group_id))),
    ranges = IRanges(
        start=c(1000, 2000, 3000, 3600, 7000, 7500, 4000, 4000, 3000, 3350, 5000, 5400),
        width=c(500, 900, 500, 300, 600, 300, 500, 900, 150, 200, 500, 500)),
   DataFrame(group_id)
)

reads <- GappedAlignments(
    names = c("a","b","c","d","e","f","g"),
    rname = Rle(c(rep(c("chr1", "chr2"), 3), "chr1")),
    pos = as.integer(c(1400, 2700, 3400, 7100, 4000, 3100, 5200)),
    cigar = c("500M", "100M", "300M", "500M", "300M", "50M200N50M", "50M150N50M"),
    strand = strand(rep.int("+", 7L)))

@

Using a \Robject{GRanges} as the \Rcode{features} all 12 ranges
are considered to be different features and counts are produced
for each row,
<<GRanges>>=
data.frame(union = assays(summarizeOverlaps(features, reads))$counts,
           intStrict = assays(summarizeOverlaps(features, reads,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(features, reads,
               mode="IntersectionNotEmpty"))$counts)
@

When the data are split by group to create a \Robject{GRangesList} 
the highest list-levels are treated as different features
and the multiple list elements are considered part of the same 
features. Counts are returned for each group. 
<<lst>>=
lst <- split(features, values(features)[["group_id"]])
length(lst)

<<GRangesList>>=
data.frame(union = assays(summarizeOverlaps(lst, reads))$counts,
           intStrict = assays(summarizeOverlaps(lst, reads,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(lst, reads,
               mode="IntersectionNotEmpty"))$counts)
@

\section{Refererences}

\url{http://www-huber.embl.de/users/anders/HTSeq/doc/overview.html} 
\noindent\url{http://www-huber.embl.de/users/anders/HTSeq/doc/count.html}

\end{document}
