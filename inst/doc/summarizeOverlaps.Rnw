%\VignetteIndexEntry{Overview of summarizeOverlaps}
%\VignetteDepends{}
%\VignetteKeywords{sequence, sequencing, alignments}
%\VignettePackage{GenomicRanges}
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textsf{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioconductor}{\software{Bioconductor}}
\newcommand{\GenomicRanges}{\Rpackage{GenomicRanges}}

\SweaveOpts{keep.source=TRUE}

\title{Counting with \Rfunction{summarizeOverlaps}}
\author{Valerie Obenchain}
\date{Edited: July 2012; Compiled: \today}

\begin{document}

\maketitle

<<options,echo=FALSE>>=
options(width=72)
@
\tableofcontents

\section{Introduction}

This vignette illustrates how reads mapped to a genome can be counted with 
\Rfunction{summarizeOverlaps}. Different "modes" of counting are provided to 
resolve reads that overlap multiple features. The built-in count modes are 
fashioned after the "Union", "IntersectionStrict", and "IntersectionNotEmpty" 
methods found in the HTSeq package by Simon Anders (see references). 


\section{A First Example}

In this example reads are counted from a list of BAM files and returned in
a \Robject{matrix} for use in further analysis such as those offered in 
\Rpackage{DESeq} and \Rpackage{edgeR}. 
<<firstExample, eval=TRUE, keep.source=TRUE>>=
library(Rsamtools)
library(DESeq)
library(edgeR)

fls <- list.files(system.file("extdata",package="GenomicRanges"),
    recursive=TRUE, pattern="*bam$", full=TRUE)
bfl <- BamFileList(fls, index=character())

features <- GRanges(
    seqnames = c(rep("chr2L", 4), rep("chr2R", 5), rep("chr3L", 2)),
    ranges = IRanges(c(1000, 3000, 4000, 7000, 2000, 3000, 3600, 4000, 
        7500, 5000, 5400), width=c(rep(500, 3), 600, 900, 500, 300, 900, 
        300, 500, 500)), "-",
    group_id=c(rep("A", 4), rep("B", 5), rep("C", 2)))

olap <- summarizeOverlaps(features, bfl)
deseq <- newCountDataSet(assays(olap)$counts, rownames(colData(olap)))
edger <- DGEList(assays(olap)$counts, group=rownames(colData(olap)))
@

\section{Counting Modes}

The modes of "Union", "IntersectionStrict" and "IntersectionNotEmpty" 
provide different approaches to resolving reads that overlap multiple 
features. Figure~\ref{fig-summarizeOverlaps-modes} illustrates how both simple and 
gapped reads are handled by the modes. Note that a read is counted a
maximum of once; there is no double counting. These methods do not 
currently handle paired-end reads. For additional detail on the
counting modes see the \Rfunction{summarizeOverlaps} man page.

\begin{figure}[!h]
\begin{center}
\includegraphics{summarizeOverlaps-modes.pdf}
\caption{Counting Modes}
\label{fig-summarizeOverlaps-modes}
\end{center}
\end{figure}

\newpage

\section{Counting Features}

Features can be exons, transcripts, genes or any region of interest. 
The number of ranges that define a single feature is specified in the 
\Rcode{features} argument. 

When annotation regions of interest are defined by a single range a
\Rclass{GRanges} should be used as the \Rcode{features} argument. With 
a \Rclass{GRanges} it is assumed that each row (i.e., each range) represents 
a distinct feature. If \Rcode{features} was a \Rclass{GRanges} of exons, 
the result would be counts per exon. 

When the region of interest is defined by one or more ranges the
\Rcode{features} argument should be a \Rclass{GRangesList}. In practice 
this could be a list of exons by gene or transcripts by gene or other 
similar relationships. The count result will be the same length as the 
\Rclass{GRangesList}. For a list of exons by genes, the result would be 
counts per gene.

The combination of defining the features as either\Rclass{GRanges} or
\Rclass{GRangesList} and choosing a counting mode controls how 
\Rfunction{summarizeOverlaps} assigns hits. Reguardless of the mode chosen, 
each read is assigned to at most a single feature. These options are intended 
to provide flexibility in defining different biological problems.

This next example demonstrates how the same read can be counted differently
depending on how the \Rcode{features} argument is specified. We use a single 
read that overlaps two ranges, gr1 and gr2.
<<simple>>=
rd <- GappedAlignments("a", seqnames = Rle("chr1"), pos = as.integer(100),
    cigar = "300M", strand = strand("+"))

gr1 <- GRanges("chr1", IRanges(start=50, width=150), strand="+")
gr2 <- GRanges("chr1", IRanges(start=350, width=150), strand="+")
@

\noindent
When provided as a \Rclass{GRanges} both gr1 and gr2 are considered 
distinct features. In this case none of the modes count the read as
a hit. Mode \Rcode{Union} discards the read becasue more than 1 feature
is overlapped. \Rcode{IntersectionStrict} requires the read to
fall completely within a feature which is not the case for either gr1 
or gr2. \Rcode{IntersetctionNotEmpty} requires the read to overlap a 
single unique disjoint region of the \Rcode{features}. In this case 
gr1 and gr2 do not overlap so each range is considered a unique disjoint 
region. However, the read overlaps both gr1 and gr2 so a decision
cannot be made and the read is discarded.
<<simpleGRanges>>=
gr <- c(gr1, gr2)
data.frame(union = assays(summarizeOverlaps(gr, rd))$counts,
           intStrict = assays(summarizeOverlaps(gr, rd,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(gr, rd,
               mode="IntersectionNotEmpty"))$counts)
@

\noindent
Next we count with \Rcode{features} as a \Rclass{GRangesList}; this is list of 
length 1 with 2 elements. Modes \Rcode{Union} and \Rcode{IntersectionNotEmpty} 
both count the read for the single feature.
<<simpleGRangesList>>=
grl <- GRangesList(c(gr1, gr2))
data.frame(union = assays(summarizeOverlaps(grl, rd))$counts,
           intStrict = assays(summarizeOverlaps(grl, rd,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(grl, rd,
               mode="IntersectionNotEmpty"))$counts)
@

\newpage
In this more complicated example we have 7 reads, 5 are simple and 
2 have gaps in the CIGAR. There are 12 ranges that will serve as the
\Robject{features}. 
<<data>>=
group_id <- c("A", "B", "C", "C", "D", "D", "E", "F", "G", "G", "H", "H")
features <- GRanges(
    seqnames = Rle(c("chr1", "chr2", "chr1", "chr1", "chr2", "chr2",
        "chr1", "chr1", "chr2", "chr2", "chr1", "chr1")),
    strand = strand(rep("+", length(group_id))),
    ranges = IRanges(
        start=c(1000, 2000, 3000, 3600, 7000, 7500, 4000, 4000, 3000, 3350, 5000, 5400),
        width=c(500, 900, 500, 300, 600, 300, 500, 900, 150, 200, 500, 500)),
   DataFrame(group_id)
)

reads <- GappedAlignments(
    names = c("a","b","c","d","e","f","g"),
    seqnames = Rle(c(rep(c("chr1", "chr2"), 3), "chr1")),
    pos = as.integer(c(1400, 2700, 3400, 7100, 4000, 3100, 5200)),
    cigar = c("500M", "100M", "300M", "500M", "300M", "50M200N50M", "50M150N50M"),
    strand = strand(rep.int("+", 7L)))

@

\noindent
Using a \Rclass{GRanges} as the \Rcode{features} all 12 ranges
are considered to be different features and counts are produced
for each row,
<<GRanges>>=
data.frame(union = assays(summarizeOverlaps(features, reads))$counts,
           intStrict = assays(summarizeOverlaps(features, reads,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(features, reads,
               mode="IntersectionNotEmpty"))$counts)
@

\noindent
When the data are split by group to create a \Rclass{GRangesList} 
the highest list-levels are treated as different features
and the multiple list elements are considered part of the same 
features. Counts are returned for each group. 
<<lst>>=
lst <- split(features, values(features)[["group_id"]])
length(lst)
@
<<GRangesList>>=
data.frame(union = assays(summarizeOverlaps(lst, reads))$counts,
           intStrict = assays(summarizeOverlaps(lst, reads,
               mode="IntersectionStrict"))$counts,
           intNotEmpty = assays(summarizeOverlaps(lst, reads,
               mode="IntersectionNotEmpty"))$counts)
@

If desired, users can supply their own counting function as the \Rcode{mode}
argument and take advantage of the infrastructure for counting over multiple 
BAM files and parsing the results into a \Rclass{SummarizedExperiment}.
See \Rcode{?'BamViews-class' or ?'BamFile-class'} in \Rpackage{Rsamtools}.

\section{\Rcode{pasilla} Data}
In this excercise we count the \Rpackage{pasilla} data by gene and by
transcript and create an \Rclass{CountDataSet}. This object can be used 
in differential expression methods offered in the \Rpackage{DESeq} 
package. 

\subsection{source files}
BAM files were downloaded from \url{http://www.embl.de/~reyes/Graveley/bam}.
Of the seven files available, 3 are single-reads and 4 are paired-end.
Smaller versions of untreated1 (single-end) and untreated2 (paired-end)
have been made available in the \Rpacakge{pasillaBamSubset} package. This 
subset includes chromosome 4 only.

\Rfunction{summarizeOverlaps} is capable of counting paired-end reads in
both a \Rcode{BamFile}-method (set argument \Rcode{singleEnd=TRUE}) or a
\Rcode{GappedAlignmentPairs}-method. For this example, we use the
3 single-end read files,
\begin{itemize}
\item treated1.bam
\item untreated1.bam
\item untreated2.bam
\end{itemize}

Annotations are retrieved as a GTF file from the ENSEMBL web site. We 
download the file our local disk, then use \Biocpkg{Rtracklayer}'s 
\Rfunction{import} function to parse the file to a \Rclass{GRanges}
instance. 
<<gff, eval=FALSE>>=
library(rtracklayer)
fl <- paste0("ftp://ftp.ensembl.org/pub/release-62/",
             "gtf/drosophila_melanogaster/",
             "Drosophila_melanogaster.BDGP5.25.62.gtf.gz")
gffFile <- file.path(tempdir(), basename(fl))
download.file(fl, gffFile)
gff0 <- import(gffFile, asRangedData=FALSE)
@

Subset on the protein-coding, exon regions of chromosome 4
and split by gene id.
<<gff_parse, eval=FALSE>>=
idx <- values(gff0)$source == "protein_coding" & 
           values(gff0)$type == "exon" & 
           seqnames(gff0) == "4"
gff <- gff0[idx]
## adjust seqnames to match Bam files
seqlevels(gff) <- paste("chr", seqlevels(gff), sep="")
chr4genes <- split(gff, values(gff)$gene_id)
@

\subsection{Counting}
The \Rcode{params} argument can be used to subset the reads in the bam file
on characteristics such as position, unmapped or paired-end reads. Quality 
scores or the "NH" tag, which identifies reads with multiple mappings, can be
included as metadata columns for further subsetting. See \Rcode{?ScanBamParam} 
for details about specifying the \Rcode{param} argument.
<<pasilla_param>>=
param <- ScanBamParam(
             what='qual',
             which=GRanges("chr4", IRanges(1, 1e6)),
             flag=scanBamFlag(isUnmappedQuery=FALSE, isPaired=NA),
             tag="NH")
@

We use \Rfunction{summarizeOverlaps} to count with the default mode of "Union".
If a \Rcode{param} argument is not included all reads from the BAM file are
counted. 
<<pasilla_count, eval=FALSE>>=
fls <- c("treated1.bam", "untreated1.bam", "untreated2.bam")
path <- "pathToBAMFiles"
bamlst <- BamFileList(fls, index=character()) 
genehits <- summarizeOverlaps(chr4genes, bamlst, mode="Union")
@

\noindent
A \Rcode{CountDataSet} is constructed from the counts and experiment
data in \Rclass{pasilla}.
<<pasilla_exoncountset, eval=FALSE>>=
expdata = new("MIAME",
              name="pasilla knockdown",
              lab="Genetics and Developmental Biology, University of 
                  Connecticut Health Center",
              contact="Dr. Brenton Graveley",
              title="modENCODE Drosophila pasilla RNA Binding Protein RNAi 
                  knockdown RNA-Seq Studies",
              url="http://www.ncbi.nlm.nih.gov/projects/geo/query/acc.cgi?acc=GSE18508",
              abstract="RNA-seq of 3 biological replicates of from the Drosophila
                  melanogaster S2-DRSC cells that have been RNAi depleted of mRNAs 
                  encoding pasilla, a mRNA binding protein and 4 biological replicates 
                  of the the untreated cell line.")
              pubMedIds(expdata) <- "20921232"

design <- data.frame(
              condition=c("treated", "untreated", "untreated"),
              replicate=c(1,1,2),
              type=rep("single-read", 3),
              countfiles=path(colData(genehits)[,1]), stringsAsFactors=TRUE)

geneCDS <- newCountDataSet(
                  countData=assays(genehits)$counts,
                  conditions=design)

experimentData(geneCDS) <- expdata
sampleNames(geneCDS) = colnames(genehits)
@

If the primary interest is to count by transcript instead of by gene, 
the annotation file can be split on transcript id. 
<<pasilla_genes, eval=FALSE>>=
chr4tx <- split(gff, values(gff)$transcript_id)
txhits <- summarizeOverlaps(chr4tx, bamlst)
txCDS <- newCountDataSet(assays(txhits)$counts, design) 
experimentData(txCDS) <- expdata
@

\section{Refererences}

\url{http://www-huber.embl.de/users/anders/HTSeq/doc/overview.html} 
\noindent\url{http://www-huber.embl.de/users/anders/HTSeq/doc/count.html}

\end{document}
